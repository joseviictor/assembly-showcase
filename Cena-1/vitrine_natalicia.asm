; ####################################################################################################################
; * UAlg | ISE-Dee | Arquitetura de Computadores | 2024-2025
; * Trabalho Final da Unidade Curricular Arquitetura de Computadores
; * Autor: José Victor Santos (a56278), Diogo Rodrigues (79299), Gonçalo Marques (71433)

; * Descrição: Este projeto consiste em aplicar conceitos de arquiteura de computadores para criar uma 
; * “Vitrine Natalícia”, para ser colocada na montra de uma loja (real ou imaginária, à sua escolha). 
; * O projeto é obrigatoriamente desenvolvido no Simulador SIMAC, na versão 2.3.0 (Out 2024), disponível na Tutoria.
; *  A vitrine festiva consiste, genericamente, num ecrã multimédia (MediaCenter), que irá apresentar 
; * elementos decorativos de Natal e/ou Ano Novo, em Pixel Art. Alguns dos elementos devem ser 
; * animados, podendo ter desde animações simples (e.g., piscar) até outras mais elaboradas, como 
; * movimento pelo ecrã.
; ####################################################################################################################

; ####################################################################################################################
; # CONSTANTES
; ####################################################################################################################
COMANDOS				EQU	6000H				; endereço de base dos comandos do MediaCenter

APAGA_PIXEIS_ECRA		EQU COMANDOS + 00H		; Apaga todos os pixeis do ecrã especificado
SELECIONA_ECRA			EQU COMANDOS + 04H		; Seleciona o ecrã especificado
MOSTRA_ECRA				EQU COMANDOS + 06H		; Mostra o ecrã especificado
ESCONDE_ECRA			EQU COMANDOS + 08H		; Esconde o ecrã especificado
DEFINE_LINHA			EQU COMANDOS + 0AH		; endereço do comando para definir a linha
DEFINE_COLUNA			EQU COMANDOS + 0CH		; endereço do comando para definir a coluna
DEFINE_PIXEL			EQU COMANDOS + 12H		; endereço do comando para escrever um pixel
APAGA_AVISO				EQU COMANDOS + 40H		; endereço do comando para apagar o aviso de nenhum cenário selecionado
APAGA_ECRA				EQU COMANDOS + 02H		; endereço do comando para apagar todos os pixels já desenhados
SELECIONA_BG			EQU COMANDOS + 42H		; endereço do comando para selecionar uma imagem de fundo
REMOVE_BG	 			EQU COMANDOS + 40H 		; endereço do comando para remover background

SELECTIONA_MIDIA		EQU COMANDOS + 48H		; seleciona arquivo de midia (GIF, som ou video), para ser usado nos comandos subsequentes
REPRODUZ_SOM			EQU COMANDOS + 5AH		; endereço do comando para reproduzir midia selecionada apenas 1x
INICIA_SOM				EQU COMANDOS + 5CH		; endereço do comando para reproduzir som especificado, continuamente até ser parado
VOLUME_SOM				EQU COMANDOS + 4AH		; define volume do som (0-100%)
PARA_SOM				EQU COMANDOS + 66H		; endereço do comando para parar som especificado
PARA_TODOS_SONS			EQU COMANDOS + 68H		; endereço do comando para parar todos os sons

TEC_LIN					EQU 0C000H				; endereço das linhas do teclado (periférico POUT-2)
TEC_COL					EQU 0E000H				; endereço das colunas do teclado (periférico PIN)
MASCARA					EQU	0FH					; para isolar os 4 bits de menor peso, ao ler as colunas do teclado

NUM_ECRAS				EQU 7					; número de ecrãs 0-7 (8 no total)

DELAY_ANIMACAO_SIMPLES	EQU 0A0H				; valor usado para implementar um atraso temporal (0A0H = 160)
DELAY_ANIMACAO_COMPLEXA	EQU 00FH				; valor usado para implementar um atraso temporal (010H = 16)

; ####################################################################################################################
; # ZONA DE DADOS 
; ####################################################################################################################
	PLACE		0500H

; Reserva do espaço para a pilha do processo principal
	STACK 200H			; espaço reservado para a pilha do "programa principal"
SP_inicial_prog_princ:	; este é o endereço com que o SP deste processo deve ser inicializado

; -------------------------------------------------------------------------------------------------------------------
; # variáveis para guardar o estado do teclado
; -------------------------------------------------------------------------------------------------------------------
tecla_carregada:
	WORD 0				; -1, se nenhuma tecla carregada / 0 a 15 (0H a FH) - indica a tecla carregada

tags_acoes_teclado:
	WORD acao_tecla_0, acao_tecla_1, acao_tecla_2, acao_tecla_3, acao_tecla_4, acao_tecla_5, acao_tecla_6, acao_tecla_7
	WORD acao_tecla_8, acao_tecla_9, acao_tecla_A, acao_tecla_B, acao_tecla_C, acao_tecla_D, acao_tecla_E, acao_tecla_F

; -------------------------------------------------------------------------------------------------------------------
; # variáveis para guardar a dimensão e posição do objeto
; -------------------------------------------------------------------------------------------------------------------
linha:
	WORD 0				; espaço reservado para guardar a linha do objeto

coluna:
	WORD 0				; espaço reservado para guardar a coluna do objeto

largura:
	WORD 0				; espaço reservado para guardar a largura do objeto

altura:
	WORD 0				; espaço reservado para guardar a altura do objeto

; -------------------------------------------------------------------------------------------------------------------
; # variáveis para controlo de animações
; -------------------------------------------------------------------------------------------------------------------
animacao_neve:			; flag para determinar se é para executar animação da neve e guardar o número dos ecrãs utilizados (0 e 1)
	WORD 0, 0, 1

animacao_luzes:			; flag para determinar se é para executar animação das luzes e guardar o número dos ecrãs utilizados (3 e 4)
	WORD 0, 3, 4 	

animacao_merryxmas:			; variável que guarda informações relativas à animação do letreiro merryxmas
	WORD 0, 1, 5, 5			; 1ª palavra: flag para determinar se é para executar animação do letreiro merryxmas (0: não, 1: sim)
							; 2ª palavra: incremento ou decremento da coluna do objeto merryxmas (-1 ou 1)
							; 3ª palavra: flag que indica número de colunas para mover o objeto merryxmas (5 inicialmente, depois 10 para cada lado)
							; 4ª palavra: flag que indica a coluna inicial do objeto merryxmas (5)

contador_atraso_neve:
	WORD DELAY_ANIMACAO_SIMPLES		; contador usado para gerar o atraso entre os movimentos dos objetos da neve

contador_atraso_arvore:
	WORD DELAY_ANIMACAO_SIMPLES		; contador usado para gerar o atraso entre os movimentos dos objetos das luzes

contador_atraso_merryxmas:
	WORD DELAY_ANIMACAO_COMPLEXA	; contador usado para gerar o atraso entre os movimentos do objeto merryxmas
	
info_giftbox:
	WORD 7, 1, 4		; Variavel que informa o número do ecrã do objeto (7), estado do objeto (exibido: 1 , ocultado: 0), ficheiro de som associado (4)

info_painatal:
	WORD 6, 1, 3		; Variavel que informa o número do ecrã do objeto (6), estado do objeto (exibido: 1 , ocultado: 0), ficheiro de som associado (3)

info_arvore:
	WORD 5, 1, 5		; Variavel que informa o número do ecrã do objeto (5), estado do objeto (exibido: 1 , ocultado: 0), ficheiro de som associado (5)

info_merryxmas:
	WORD 2, 1, 6		; Variavel que informa o número do ecrã do objeto (2), estado do objeto (exibido: 1 , ocultado: 0), ficheiro de som associado (6)

info_luz_1:
	WORD 3,0			; Variavel que informa o número do ecrã do objeto (3) e se o objeto luz 1 está sendo exibido (1) ou ocultado (0)

info_luz_2:
	WORD 4,0			; Variavel que informa o número do ecrã do objeto (4) e se o objeto luz 2 está sendo exibido (1) ou ocultado (0)

info_neve_1:
	WORD 0,0			; Variavel que informa o número do ecrã do objeto (0) e se o objeto neve 1 está sendo exibido (1) ou ocultado (0)

info_neve_2:
	WORD 1,0			; Variavel que informa o número do ecrã do objeto (1) e se o objeto neve 2 está sendo exibido (1) ou ocultado (0)

; -------------------------------------------------------------------------------------------------------------------
; # Tabelas dos objetos a escrever nos respetivos ecrãs
; -------------------------------------------------------------------------------------------------------------------
giftbox:				; tabela que define o objeto giftbox (cor, largura, pixels)
	WORD  6, 8, 11, 15 	; linha,coluna,largura,altura
	WORD  0000H,0FC22H,0FC22H, 0000H, 0000H, 0000H, 0000H, 0000H,0FC22H,0FC22H, 0000H
	WORD  0FC22H,0FE12H,0FE12H,0FE12H, 0000H, 0000H, 0000H,0FC22H,0FE12H,0FE12H,0FC22H
	WORD  0FC22H,0FE12H,0FE12H,0FE12H,0FC22H,0FC22H,0FC22H,0FE12H,0FE12H,0FE12H,0FC22H
	WORD  0000H,0FC22H,0FE12H,0FE12H,0FC22H,0FE12H,0FC22H,0FE12H,0FE12H,0FC22H, 0000H
	WORD  0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H
	WORD  0F353H,0F462H,0F462H,0F462H,0F462H,0F462H,0F462H,0F462H,0F462H,0F462H,0F353H
	WORD  0F353H,0F462H,0F462H,0F462H,0F462H,0F462H,0F462H,0F462H,0F462H,0F462H,0F353H
	WORD  0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H,0F353H
	WORD  0000H,0F353H,0F462H,0F462H,0FC22H,0FE12H,0FC22H,0F462H,0F462H,0F353H, 0000H
	WORD  0000H,0F353H,0F462H,0F462H,0FC22H,0FE12H,0FC22H,0F462H,0F462H,0F353H, 0000H
	WORD  0000H,0F353H,0F462H,0F462H,0FC22H,0FE12H,0FC22H,0F462H,0F462H,0F353H, 0000H
	WORD  0000H,0F353H,0F462H,0F462H,0FC22H,0FE12H,0FC22H,0F462H,0F462H,0F353H, 0000H
	WORD  0000H,0F353H,0F462H,0F462H,0FC22H,0FE12H,0FC22H,0F462H,0F462H,0F353H, 0000H
	WORD  0000H,0F353H,0F462H,0F462H,0FC22H,0FE12H,0FC22H,0F462H,0F462H,0F353H, 0000H
	WORD  0000H,0F353H,0F353H,0F353H,0FC22H,0FE12H,0FC22H,0F353H,0F353H,0F353H, 0000H
	
pai_natal:				; tabela que define o objeto pai natal (cor, largura, pixels)
	WORD  4, 26, 13, 17 ; linha,coluna,largura,altura
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H,0FBBBH,0FFFFH, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H,0FC22H,0FC22H,0FC22H,0FFFFH,0FFFFH, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H,0FC22H,0FC22H,0FE12H,0FE12H,0FE12H,0FC22H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H,0FC22H,0FC22H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FC22H, 0000H, 0000H
	WORD  0000H,0FC22H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FC22H, 0000H
	WORD  0FC22H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FE12H,0FC22H
	WORD  0FE12H,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FE12H
	WORD  0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FFFFH,0FFFFH
	WORD  0000H,0FFFFH,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FFFFH, 0000H
	WORD  0000H,0FEA7H,0FEA7H,0FEA7H,0F000H,0FEA7H,0FEA7H,0FEA7H,0F000H,0FEA7H,0FEA7H,0FEA7H, 0000H
	WORD  0000H,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH, 0000H
	WORD  0000H,0FFFFH,0FFFFH,0FFFFH,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FEA7H,0FFFFH,0FFFFH,0FFFFH, 0000H
	WORD  0000H,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FEA7H,0FEA7H,0FEA7H,0FFFFH,0FFFFH,0FFFFH,0FFFFH, 0000H
	WORD  0000H,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH, 0000H
	WORD  0000H,0FBBBH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FBBBH, 0000H
	WORD  0000H, 0000H,0FBBBH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FBBBH, 0000H, 0000H
	WORD  0000H, 0000H, 0000H,0FBBBH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FFFFH,0FBBBH, 0000H, 0000H, 0000H

arvore:					; tabela que define o objeto pai natal (cor, largura, pixels)
	WORD  6, 44, 13, 16 ; linha,coluna,largura,altura
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H,0F562H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H,0F562H,0F793H,0F562H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H,0F785H,0F793H,0F785H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H,0F562H,0F793H,0F793H,0F793H,0F562H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H,0F785H,0F793H,0F793H,0F793H,0F785H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H,0F562H,0F793H,0F793H,0F793H,0F793H,0F793H,0F562H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H,0F785H,0F793H,0F793H,0F793H,0F793H,0F793H,0F785H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H,0F562H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F562H, 0000H, 0000H
	WORD  0000H, 0000H,0F785H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F785H, 0000H, 0000H
	WORD  0000H,0F562H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F562H, 0000H
	WORD  0000H,0F785H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F785H, 0000H
	WORD  0F562H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F793H,0F562H
	WORD  0F562H,0F562H,0F562H,0F562H,0F562H,0F562H,0F562H,0F562H,0F562H,0F562H,0F562H,0F562H,0F562H
	WORD  0000H, 0000H, 0000H, 0000H,0F941H,0F953H,0F953H,0F953H,0F941H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H,0F941H,0F941H,0F941H,0F941H,0F941H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H

luzes1:					; tabela que define o objeto luzes da árvore 1 (cor, largura, pixels)
	WORD  7, 47, 8, 11 	; linha,coluna,largura,altura
	WORD  0000H, 0000H, 0000H,0FAE1H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H,0FE12H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H,0FFC0H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H,0FF70H, 0000H, 0000H,0FAE1H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0FF70H, 0000H,0FFC0H, 0000H, 0000H,0FE12H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0FE12H, 0000H, 0000H, 0000H, 0000H,0FAE1H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H,0FFC0H, 0000H, 0000H, 0000H,0FF70H

luzes2:					; tabela que define o objeto luzes da árvore 2 (cor, largura, pixels)
	WORD  7, 47, 8, 11 	; linha,coluna,largura,altura
	WORD  0000H, 0000H, 0000H,0FE12H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H,0FAE1H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H,0F903H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H,0FFC0H, 0000H, 0000H,0FE12H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0FFC0H, 0000H,0F903H, 0000H, 0000H,0FAE1H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0FAE1H, 0000H, 0000H, 0000H, 0000H,0FE12H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H,0F903H, 0000H, 0000H, 0000H,0FFC0H

merry_xmas:				; tabela que define o objeto que contém o texto merry xmas (cor, largura, pixels)
	WORD  24, 4, 59, 5 	; linha,coluna,largura,altura
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H,0FFFFH,0FFFFH,0FFFFH,0FFFFH, 0000H,0FFFFH,0FFFFH,0FFFFH, 0000H, 0000H,0FFFFH,0FFFFH,0FFFFH, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H,0FFFFH,0FFFFH, 0000H, 0000H, 0000H,0FFFFH,0FFFFH,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0FFFFH,0FFFFH, 0000H,0FFFFH,0FFFFH, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH,0FFFFH, 0000H,0FFFFH,0FFFFH, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0FFFFH, 0000H,0FFFFH, 0000H,0FFFFH, 0000H,0FFFFH,0FFFFH,0FFFFH, 0000H, 0000H,0FFFFH,0FFFFH,0FFFFH, 0000H, 0000H,0FFFFH,0FFFFH,0FFFFH, 0000H, 0000H, 0000H,0FFFFH,0FFFFH,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H,0FFFFH,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H,0FFFFH, 0000H,0FFFFH,0FFFFH,0FFFFH,0FFFFH, 0000H, 0000H,0FFFFH,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H,0FFFFH,0FFFFH,0FFFFH,0FFFFH, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H, 0000H,0FFFFH, 0000H,0FFFFH, 0000H, 0000H,0FFFFH, 0000H,0FFFFH,0FFFFH,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H

neve1:					; tabela que define o objeto neve 1 (cor, largura, pixels)
	WORD  0, 0, 64, 32 	; linha,coluna,largura,altura
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H

neve2:					; tabela que define o objeto neve 2 (cor, largura, pixels)
	WORD  0, 0, 64, 32 	; linha,coluna,largura,altura
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H, 0000H
	WORD  0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H, 0000H, 0000H,0FFFFH, 0000H, 0000H, 0000H, 0000H,0F444H, 0000H, 0000H

; ####################################################################################################################
; * CÓDIGO
; ####################################################################################################################
	PLACE   0								; o código tem de começar em 0000H
inicio:
	MOV  SP, SP_inicial_prog_princ			; inicializa SP do programa principal
  	MOV [APAGA_AVISO], R1					; apaga o aviso de nenhum cenário selecionado (o valor de R1 não é relevante)
  	MOV [APAGA_ECRA], R1					; apaga todos os pixels já desenhados (o valor de R1 não é relevante)
	MOV	R1, 0								; cenário de fundo número 0
  	MOV [SELECIONA_BG], R1					; seleciona o cenário de fundo
	MOV	R4, giftbox							; endereço da tabela que define o primeiro objeto
	MOV R7, NUM_ECRAS						; num total de ecrãs a desenhar (NUM_ECRAS + 1)
	CALL desenha_objetos					; Chama a rotina para desenhar todos os objetos da cena

ciclo:										; ciclo das rotinas cooperativas no programa principal
	CALL teclado							; verifica tecla premida
	CALL acoes_teclado						; executa ações do teclado conforme tecla premida

	anima_neve:								; Verifica se a animação de neve deve ser executada
		MOV R3, [animacao_neve]				; Carrega o estado da flag de animação da neve (0: desligado, 1: ligado)
		CMP R3, 0							; Compara o estado com 0
		JZ anima_luzes						; Se a flag de animação da neve for (0), salta para anima_luzes
		; Argumentos para a animação da neve
		MOV R0, contador_atraso_neve 		; Carrega o endereço da variável contador_atraso_neve
		MOV R2, DELAY_ANIMACAO_SIMPLES		; Carrega o valor do atraso da animação de neve
		MOV R3, info_neve_1					; Carrega o estado do ecrã de neve 1
		MOV R4, info_neve_2					; Carrega o estado do ecrã de neve 2
		CALL animacao_simples				; Chama a rotina para animar a neve

	anima_luzes:							; Verifica se a animação da árvore deve ser executada
		MOV R3, [animacao_luzes]			; Carrega o estado da flag de animação das luzes da árvore (0: desligado, 1: ligado)
		CMP R3, 0							; Compara o estado com 0
		JZ anima_merryxmas					; Se a flag de animação da árvore for (0), salta para fim_ciclo
		; Argumentos para a animação das luzes da árvore
		MOV R0, contador_atraso_arvore		; Carrega o endereço da variável contador_atraso_arvore
		MOV R2, DELAY_ANIMACAO_SIMPLES		; Carrega o valor do atraso da animação da árvore
		MOV R3, info_luz_1					; Carrega o estado do ecrã de luzes 1
		MOV R4, info_luz_2					; Carrega o estado do ecrã de luzes 2
		CALL animacao_simples				; Chama a rotina para animar a neve

	anima_merryxmas:						; Verifica se a animação da árvore deve ser executada
		MOV R3, [animacao_merryxmas]		; Carrega o estado da flag de animação da árvore (0: desligado, 1: ligado)
		CMP R3, 0							; Compara o estado com 0
		JZ fim_ciclo						; Se a flag de animação da árvore for (0), salta para fim_ciclo
		CALL animacao_complexa_merryxmas	; Chama a rotina da animação da neve

fim_ciclo:
	JMP ciclo				 				; volta para o início do loop principal

fim:
    JMP fim                 				; finaliza o programa

; ####################################################################################################################
; * ROTINAS
; ####################################################################################################################
; ********************************************************************************************************************
; ROTINAS PARA ESCREVER NO ECRA
; ********************************************************************************************************************
; -------------------------------------------------------------------------------------------------------------------
; DESENHA_OBJETOS - Desenha todos os objetos da cena nas respetivas linhas, colunas e com a forma e cor definidas na tabela indicada, ao iniciar o programa
; Argumentos:  R4 - endereço da tabela que define o primeiro objeto a desenhar
; 			   R7 - número do ecrã a desenhar
;
; -------------------------------------------------------------------------------------------------------------------
desenha_objetos:
	PUSH R4
	PUSH R7
	PUSH R8									; Salva os registros usados para restaurar no final

seleciona_ecra: 
	MOV [SELECIONA_ECRA], R7				; seleciona ecrã (um para cada objeto)

verifica_ecra_atual:
	CMP R7, 0								; se for o ecrã 0 (neve0)
	JZ esconde_ecra_atual					; esconde ecrã 0
	CMP R7, 1								; se for o ecrã 1 (neve1)
	JZ esconde_ecra_atual					; esconde ecrã 1
	CMP R7, 3								; se for o ecrã 3 (luzes0)
	JZ esconde_ecra_atual					; esconde ecrã 3
	CMP R7, 4 								; se for o ecrã 4 (luzes1)
	JZ esconde_ecra_atual					; esconde ecrã 4
	JMP desenhar_objeto_atual				; se não for nenhum dos ecrãs acima, não oculta o ecrã e desenha o objeto normalmente

esconde_ecra_atual:
	MOV [ESCONDE_ECRA], R7					; comando do MediaCenter para esconder o ecrã

desenhar_objeto_atual:
	CALL desenha_objeto						; Desenha o objeto atual. Argumentos: R4 - tabela que define o objeto a desenhar
	
próximo_objeto:
	SUB R7, 1								; decrementa o número do ecrã no qual será desenhado o próximo objeto.
	JNN seleciona_ecra						; desenha próximo ecrã se R7 (num do ecrã) não for < 0-7

	POP R8									; Restaura os registros e retorna
	POP	R7
	POP R4
	RET

; -------------------------------------------------------------------------------------------------------------------
; DESENHA_OBJETO - Desenha um objeto na linha, colunas e com a forma e cor definidas na tabela indicada.
; Argumentos:   R4 - tabela que define o objeto
;
; -------------------------------------------------------------------------------------------------------------------
desenha_objeto:
    MOV R1, [R4]							; obtém a linha do objeto, será decrementada para controlo de fluxo
	MOV [linha], R1							; guarda LINHA do objeto
	ADD R4, 2								; avança para a 2ª palavra da tabela que define o objeto
	
	MOV R2, [R4]							; obtém a coluna do objeto, será decrementada para controlo de fluxo
	MOV [coluna], R2						; guarda coluna do objeto
	ADD R4, 2								; avança para a 3ª palavra da tabela que define o objeto
	
	MOV R5, [R4]							; obtém a largura do objeto - será decrementada para controlo de fluxo
	MOV [largura], R5						; guarda largura
	ADD R4, 2								; avança para a 4ª palavra da tabela que define o objeto
	
	MOV R6, [R4]							; obtém a altura do objeto
	MOV [altura], R6						; guarda a altura do objeto
	ADD R4, 2								; avança para a próxima palavra da tabela que define o objeto para obter a cor do pixel

reinicia_coluna:       						; desenha pixel na linha e coluna do objeto a partir da tabela
	MOV R2, [coluna]						; reinicia a coluna para cada linha

desenha_pixel:
	MOV	R3, [R4]							; obtém a cor do pixel do objeto
	CALL escreve_pixel						; escreve cada pixel do objeto

próxima_coluna:
	ADD	R4, 2								; endereço da cor do próximo pixel (2 porque cada cor de pixel é uma word)
    ADD R2, 1               				; próxima coluna
    SUB R5, 1								; menos uma coluna para tratar
    JNZ desenha_pixel      					; continua até percorrer toda a largura do objeto

próxima_linha:
	ADD R1, 1								; próxima linha
	MOV R5, [largura]						; reinicia a largura do objeto
	SUB R6, 1								; menos uma linha para tratar
	JNZ reinicia_coluna						; continua até percorrer todas as linhas

	RET

; ********************************************************************************************************************
; ROTINAS DE ANIMAÇÃO
; ********************************************************************************************************************
; -------------------------------------------------------------------------------------------------------------------
; ANIMACAO_SIMPLES - Executa uma animação simples (dois objetos a alternar entre si) de forma não bloqueante
; Argumentos:  	R0 - endereço da variável que guarda o valor do contador do atraso
;		   		R2 - endereço da variável que guarda o valor do atraso
;   			R3 - endereço da variável que guarda o número do ecrã e estado do objeto 1
;   			R4 - endereço da variável que guarda o número do ecrã estado do objeto 2
;				
; -------------------------------------------------------------------------------------------------------------------
animacao_simples:
	PUSH R0									; Salva o conteúdo de R0 na stack
	PUSH R1									; Salva o conteúdo de R1 na stack
	PUSH R2									; Salva o conteúdo de R2 na stack

verifica_atraso:
	CALL atraso								; Chama a rotina para verificar o atraso (argumentos - R0: variável do contador do atraso, R2: variável do valor do atraso)
	CMP R1, 0								; Compara o valor do atraso com 0
	JNZ fim_rotina_animacao_simples			; Se não for 0, sai da rotina

alterna_objetos:
	MOV R0, R3								; endereço da variável que guarda o número do ecrã e estado do objeto 1 (0: desligado, 1: ligado)
	MOV R1, R4								; endereço da variável que guarda o número do ecrã e estado do objeto 2 (0: desligado, 1: ligado)
	CALL alterna_entre_dois_objetos			; Argumentos - R0: variável que guarda o num do ecrã e estado do objeto 1, R1: variável que guarda o num do ecrã e estado do objeto 2

fim_rotina_animacao_simples:				; Restaura os registros salvos e retorna à rotina que chamou
	POP R2
	POP R1
	POP R0
	RET

; -------------------------------------------------------------------------------------------------------------------
; ANIMACAO_COMPLEXA_MERRYXMAS - Executa uma animação complexa do letreiro merry xmas, movendo-o para a esquerda e direita
; Argumentos:  Nenhum
; -------------------------------------------------------------------------------------------------------------------
animacao_complexa_merryxmas:
	PUSH R0									; Salva o conteúdo dos registos na stack
    PUSH R1					
    PUSH R2                                 
	PUSH R3
    PUSH R4
	PUSH R5
	PUSH R6
    PUSH R7

verifica_atraso_merryxmas:					; Verifica se o atraso da animação merryxmas já terminou. Se não, sai da rotina.
	MOV R0, contador_atraso_merryxmas		; endereço da variável que guarda o atraso
	MOV R2, DELAY_ANIMACAO_COMPLEXA			; valor do atraso para a animações complexa - é mais rápida para que o movimento do objeto seja mais suave
    CALL atraso                   			; Chama a rotina para verificar atraso
    CMP R1, 0                               ; Compara o resultado da verificação
    JNZ fim_rotina_merryxmas                ; Se não for 0 (ainda em atraso), sai da rotina

desenha_objeto_merryxmas:					; Desenha o objeto merryxmas
    MOV R1, 2                               ; num do ecrã do merryxmas
    MOV [SELECIONA_ECRA], R1                ; seleciona ecrã merryxmas
    MOV R4, merry_xmas                      ; endereço da tabela que define o objeto merryxmas
    CALL desenha_objeto						; desenha o objeto merryxmas

atualiza_coluna:							; obtém coluna atual do objeto merryxmas e atualiza-a
    MOV R1, merry_xmas						; guarda no registo novamente o endereço da tabela que define o objeto merryxmas, pois o valor de R4 foi alterado na rotina desenha_objeto
    ADD R1, 2                               ; avança para a próxima palavra da tabela que define o objeto merryxmas
    MOV R2, [R1]                            ; obtem num da coluna do objeto
    
	; obtém o valor a somar à coluna para incrementar ou decrementar (1 ou -1)
	MOV R3, animacao_merryxmas				; endereço da variável que guarda informações da animação merryxmas
	ADD R3, 2								; avança para a 2ª palavra da tabela que contém as informações da animação do objeto merryxmas
	MOV R4, [R3]							; obtem o valor a adicionar à coluna do objeto merryxmas (1 ou -1)

	; incrementa ou decrementa a coluna do objeto merryxmas e guarda o novo valor na tabela que define o objeto
	ADD R2, R4                              ; incrementa ou decrementa coluna em 1 pixel
    MOV [R1], R2                            ; guarda novo número da coluna
    
	; verifica se o objeto já avançou as colunas definidas para o movimento completo
	ADD R3, 2								; avança para a 3ª palavra da tabela que contém as informações da animação do objeto merryxmas
	MOV R5, [R3]							; obtem o número de colunas a mover
	SUB R5, 1                               ; decrementa o número de colunas a mover
	MOV [R3], R5                            ; guarda o novo número de colunas restantes para mover neste ciclo do movimento
	CMP R5, 0                               ; compara o número de colunas a mover com 0
    JNZ fim_rotina_merryxmas                ; se ainda há colunas a mover, sai da rotina

obtem_direcao_e_inverte:					; obtém a direção do movimento do objeto merryxmas e inverte-a quando esgota o movimento numa direção (-1 <> 1)
	SUB R3, 2								; volta para a 2ª palavra da tabela que contém as informações da animação do objeto merryxmas
	MOV R6, [R3]                            ; obtem a direção do movimento do objeto merryxmas (-1 ou 1)
	NEG R6									; inverte a direção do movimento
    MOV [R3], R6                            ; atualiza a direção do movimento do objeto merryxmas para -1
	MOV R7, 10                              ; reinicia o número de colunas a mover para 10
	ADD R3, 2								; avança para a 3ª palavra da tabela que contém as informações da animação do objeto merryxmas
	MOV [R3], R7                            ; atualiza o número de colunas a mover para 10

fim_rotina_merryxmas:                       ; Restaura os registros salvos e retorna ao programa principal
    POP R7
	POP R6
	POP R5
    POP R4
	POP R3
    POP R2
    POP R1
	POP R0
    RET

; ********************************************************************************************************************
; ROTINAS AUXILIARES
; ********************************************************************************************************************
; -------------------------------------------------------------------------------------------------------------------
; ESCREVE_PIXEL - Escreve um pixel na linha e coluna indicadas.
; Argumentos:   R1 - linha
;               R2 - coluna
;               R3 - cor do pixel (em formato ARGB de 16 bits)
;
; -------------------------------------------------------------------------------------------------------------------
escreve_pixel:
	MOV [DEFINE_LINHA], R1				; seleciona a linha
	MOV [DEFINE_COLUNA], R2				; seleciona a coluna
	MOV [DEFINE_PIXEL], R3				; altera a cor do pixel na linha e coluna selecionadas
	RET

; -------------------------------------------------------------------------------------------------------------------
; ATRASO - Faz DELAY iterações, para implementar um atraso no tempo, de forma não bloqueante.
; Argumentos:   R0 - endereço da variável que guarda o contador do atraso
;				R2 - valor inicial do atraso a repor após o fim do atraso (ATRASO_ANIMACAO_SIMPLES ou ATRASO_ANIMACAO_COMPLEXA)
; Saidas:		R1 - Se 0, o atraso chegou ao fim
; -------------------------------------------------------------------------------------------------------------------
atraso:
	MOV  R1, [R0]						; obtém valor do contador do atraso
	SUB  R1, 1							; Decrementa o contador em 1
	MOV  [R0], R1						; atualiza valor do contador do atraso
	JNZ  sai_atraso						; Se o contador não for zero, salta para `sai_atraso_neve`
	MOV  [R0], R2						; volta a colocar o valor inicial no contador do atraso
sai_atraso:			
	RET

; -------------------------------------------------------------------------------------------------------------------
; MOSTRA_OBJETO: Rotina para exibir um ecrã e reproduzir um efeito sonoro associado ao objeto. 	
; Argumentos: R1 - endereço da 2ª palavra da variável que define o ecrã e estado do objeto (exibido/ocultado)
;			  R2 - número do ecrã a ser exibido/ocultado, em que o objeto está desenhado
;			  R4 - número do som associado ao ecrã a ser exibido
; -------------------------------------------------------------------------------------------------------------------
mostra_objeto:
	PUSH R5
	
	MOV [MOSTRA_ECRA], R2				; Mostra o ecrã	
	MOV R5, 1							; Define o novo estado como "exibido" (1)
	MOV [R1], R5						; atualiza estado do objeto para exibido (1)

reproduz_som:
	MOV [REPRODUZ_SOM], R4				; Reproduz o som associado ao ecrã

fim_mostra_objeto:						; Restaura os valores dos registradores
	POP R5
	RET

; -------------------------------------------------------------------------------------------------------------------
; ESCONDE_OBJETO: Rotina para ocultar um ecrã e seu respetivo objeto, atualizando o estado do objeto para 0 - oculto.
; Argumentos: R1 - endereço da 2ª palavra da variável que define o ecrã e estado do objeto (exibido/ocultado)
;			  R2 - número do ecrã a ser exibido/ocultado, em que o objeto está desenhado
; -------------------------------------------------------------------------------------------------------------------
esconde_objeto:
	PUSH R4
	MOV [ESCONDE_ECRA], R2				; Oculta o ecrã
	MOV R4, 0							; define o novo estado como "ocultado" (0)
	MOV [R1], R4						; atualiza estado do objeto para ocultado (0)
	POP R4
	RET

; -------------------------------------------------------------------------------------------------------------------
; ALTERNA_ENTRE_DOIS_OBJETOS: Rotina que alterna a exibição de dois ecrãs/objetos, consoante o ecrã exibido atualmente, e atualiza as flagas de estado dos objetos.
; Argumentos: R0 - endereço da variável que guarda as informações do objeto (número do ecrã, estado do objeto, som associado)
;			  R1 - endereço da variável que guarda as informações do objeto (número do ecrã, estado do objeto, som associado)
; -------------------------------------------------------------------------------------------------------------------
alterna_entre_dois_objetos:
	PUSH R0								; Guarda o valor atual dos registradores na pilha
	PUSH R1
	PUSH R2
	PUSH R3
	PUSH R4
	PUSH R5
	PUSH R6

	; Obtém dados do primeiro objeto a partir da variável de estado											
	MOV R2, [R0]						; Carrega o número do ecrã do primeiro objeto obtido a partir da variável de estado
	ADD R0, 2							; Avança para a próxima palavra da tabela, para obter o estado (0: oculto, 1: exibido)
	MOV R3, [R0]						; Carrega o estado do primeiro objeto em R3
	
	; Obtém dados do segundo objeto a partir da variável de estado
	MOV R4, [R1]						; Carrega o número do ecrã do segundo objeto obtido a partir da variável de estado
	ADD R1, 2							; Avança para a próxima palavra da tabela, para obter o estado (0: oculto, 1: exibido)
	MOV R5, [R1]						; Carrega o estado do segundo objeto

	CMP R3, 0							; Verifica se o primeiro objeto está oculto
	JNZ mostra_obj_2					; Se sim, chama a rotina para exibir objeto 1

mostra_obj_1:							; Mostra o primeiro objeto e atualiza as flags de estado de ambos os objetos
	MOV [MOSTRA_ECRA], R2				; Comando para mostrar o ecrã do objeto 1
	MOV [ESCONDE_ECRA], R4				; Comando para esconder o ecrã do objeto 2
	MOV R6, 1							; Atualiza a flag para indicar que o primeiro objeto está exibido
	MOV [R0], R6						; Salva a flag atualizada
	MOV R6, 0							; Atualiza a flag para indicar que o segundo objeto está oculto
	MOV [R1], R6						; Salva a flag atualizada
	JMP fim_rotina_alterna_objetos		; Sai da rotina

mostra_obj_2:							; Mostra o segundo objeto e atualiza as flags de estado de ambos os objetos	
	MOV [ESCONDE_ECRA], R2				; Comando para esconder o ecrã do objeto 1
	MOV [MOSTRA_ECRA], R4				; Comando para mostrar o ecrã do objeto 2
	MOV R6, 0							; Atualiza a flag para indicar que o primeiro objeto está oculto
	MOV [R0], R6						; Salva a flag atualizada
	MOV R6, 1							; Atualiza a flag para indicar que o segundo objeto está exibido
	MOV [R1], R6						; Salva a flag atualizada
	JMP fim_rotina_alterna_objetos		; Sai da rotina

fim_rotina_alterna_objetos:				; Restaura os registros salvos e retorna à rotina que o chamou
	POP R6
	POP R5
	POP R4
	POP R3
	POP R2
	POP R1
	POP R0
	RET
	
; -------------------------------------------------------------------------------------------------------------------
; TECLADO - Rotina cooperativa que deteta quando se carrega numa tecla de um teclado de 16 teclas, guardando o valor 
; 			da tecla carregada (0-15) na variável "tecla_carregada". Se nenhuma tecla for carregada, guarda o valor -1.
; Argumentos: Nenhum
; -------------------------------------------------------------------------------------------------------------------
teclado:
	PUSH R0                             ; Salva o valor dos registos na pilha
	PUSH R1                             
	PUSH R2                             
	PUSH R3                             
	PUSH R4                             
	PUSH R5                             
	
	MOV  R2, TEC_LIN                    ; endereço do periférico das linhas
	MOV  R3, TEC_COL                    ; endereço do periférico das colunas
	MOV  R5, MASCARA                    ; para isolar os 4 bits de menor peso, ao ler as colunas do teclado
	MOV  R1, 1                          ; Inicializa R1 com o valor para a linha 1

testa_linha:
	MOVB [R2], R1                       ; Escrever no periférico de saída (linha)
	MOVB R0, [R3]                       ; Ler do periférico de entrada (colunas)
	AND  R0, R5                         ; Isolar os 4 bits de menor peso (colunas)
	CMP  R0, 0                          ; Há tecla premida?
	JNZ  ha_tecla                       ; Se pressionada, salta para "ha_tecla" para processar

	SHL  R1, 1                          ; Se não, desloca a linha para a próxima (1, 2, 4, 8)
	MOV  R4, 16						    ; Prepara o valor 16 para a comparação
	CMP  R1, R4                         ; Já testou todas as linhas? (Se sim, R1 = 16)
	JNZ  testa_linha                    ; Se não, testa a próxima linha
	JMP  nao_ha_tecla                 	; Se todas as linhas foram testadas e nenhuma tecla foi detetada, guarda o valor de -1

ha_tecla:								; Tag deixada aqui apenas para facilitar a leitura do código e deixar mais explícito
linha_para_indice:
    SHR  R1, 1                          ; O objetivo é converter linha (1, 2, 4, 8) para (0, 1, 2, 3) -> mas o SHR converte 8 para 4, por isso deve ser corrigido a seguir
	CMP  R1, 4							; Verifica se a linha é 4
	JNZ coluna_para_indice				; Se a linha for diferente de 4 (0,1,2), salta para "define_tecla"
	MOV  R1, 3                          ; Se a linha for 4, converte para 3

coluna_para_indice:
    SHR  R0, 1                          ; Converte coluna (1, 2, 4, 8) para (0, 1, 2, 3) -> mas o SHR converte 8 para 4, por isso deve ser corrigido a seguir
	CMP  R0, 4							; Verifica se a coluna é 4
	JNZ define_tecla					; Se a coluna for diferente de 4, salta para "define_tecla"
	MOV  R0, 3                          ; Se a coluna for 4, converte para 3

define_tecla:
    SHL  R1, 2                          ; Multiplica a linha por 4 (desloca 2 bits para a esquerda)
    ADD  R0, R1                         ; Calculando o valor da tecla (0 a 15): linha * 4 + coluna
    MOV  [tecla_carregada], R0          ; Armazena o valor da tecla pressionada (0 a 15)
    JMP  sai_teclado                    ; Sai da rotina

nao_ha_tecla:
	MOV R0, -1							; Se nenhuma tecla foi pressionada, guarda o valor de -1
	MOV [tecla_carregada], R0			; Armazena o valor da tecla pressionada (-1)

sai_teclado:
	POP  R5
	POP  R4
    POP  R3
    POP  R2
    POP  R1
    POP  R0
    RET                                ; Retorna sempre, haja ou não uma tecla carregada

; -------------------------------------------------------------------------------------------------------------------
; ACOES_TECLADO - Rotina que deteta qual tecla do teclado foi carregada e executa uma ação correspondente, podendo ativar
;				  ou desativar animações, reproduzir som, selecionar imagem de fundo ou parar todos os sons, entre outras.
; Argumentos: Nenhum
; -------------------------------------------------------------------------------------------------------------------
acoes_teclado:
	PUSH R0								; Salva o valor dos registos na stack
	PUSH R1								
	PUSH R2								
	PUSH R3 							
	PUSH R4 							

	MOV R0, [tecla_carregada]			; obtém o valor da variável que guarda a tecla carregada (-1: nenhuma tecla carregada; 0 - 15: id da tecla carregada) 
	CMP R0, -1							; Verifica se nenhuma tecla foi carregada
	JZ sai_rotina_teclado				; Sai da rotina se nenhuma tecla foi pressionada

verifica_tecla:
    ADD R0, R0              			; R0 = R0 + R0 = R0 * 2 (multiplicação por 2)
    MOV R2, tags_acoes_teclado  		; Carrega o endereço base da tabela que contém o nome das tags das ações do teclado em R2
    ADD R2, R0              			; Soma o deslocamento (R0) ao endereço base
    MOV R2, [R2]            			; Acessa a tabela usando o endereço calculado
    JMP R2                  			; Salta para a ação correspondente

acao_tecla_0: 							; Mostra ou oculta o objeto giftbox consonte o estado atual (exibido/ocultado) e reproduz o efeito sonoro associado
	MOV R3, info_giftbox				; Prepara o endereço da variável que guarda as informações do objeto giftbox (número do ecrã, estado do objeto, som associado)
	CALL interruptor_objeto				; Chama a rotina que mostra ou oculta o objeto e reproduz o efeito sonoro associado
	JMP sai_rotina_teclado

acao_tecla_1: 							; Mostra ou oculta o objeto pai natal consonte o estado atual (exibido/ocultado) e reproduz o efeito sonoro associado
	MOV R3, info_painatal				; Prepara o endereço da variável que guarda as informações do objeto giftbox (número do ecrã, estado do objeto, som associado)
	CALL interruptor_objeto				; Chama a rotina que mostra ou oculta o objeto e reproduz o efeito sonoro associado
	JMP sai_rotina_teclado

acao_tecla_2:							; Mostra ou oculta o objeto arvore consonte o estado atual (exibido/ocultado) e reproduz o efeito sonoro associado
	MOV R3, info_arvore					; Prepara o endereço da variável que guarda as informações do objeto giftbox (número do ecrã, estado do objeto, som associado)
	CALL interruptor_objeto				; Chama a rotina que mostra ou oculta o objeto e reproduz o efeito sonoro associado
	JMP sai_rotina_teclado

acao_tecla_3:							; Mostra ou oculta o objeto merryxmas consonte o estado atual (exibido/ocultado) e reproduz o efeito sonoro associado
	MOV R3, info_merryxmas				; Prepara o endereço da variável que guarda as informações do objeto giftbox (número do ecrã, estado do objeto, som associado)
	CALL interruptor_objeto				; Chama a rotina que mostra ou oculta o objeto e reproduz o efeito sonoro associado
	JMP sai_rotina_teclado

acao_tecla_4:							; Para todos os sons
	MOV [PARA_TODOS_SONS], R3			; Comando para parar todos os sons - o valor de R1 é irrelevante
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_5:							; Reproduz o som 0 em loop
	MOV R3, 0							; Prepara o identificador de som 0 para o reproduzir
	MOV [INICIA_SOM], R3				; Comando para iniciar a reprodução do som especificado em loop
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_6:							; Reproduz o som 1 em loop
	MOV R3, 1							; Prepara o identificador de som 0 para o reproduzir
	MOV [INICIA_SOM], R3				; Comando para iniciar a reprodução do som especificado em loop
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_7:							; Reproduz o som 2 em loop
	MOV R3, 2							; Prepara o identificador de som 0 para o reproduzir
	MOV [INICIA_SOM], R3				; Comando para iniciar a reprodução do som especificado em loop
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_8:							; Define a imagem 0 como imagem de fundo
	MOV R3, 0							; Prepara o identificador da imagem 0 para ser definida como imagem de fundo
	MOV [SELECIONA_BG], R3				; Atualiza a seleção de imagem de fundo
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_9:							; Define a imagem 1 como imagem de fundo
	MOV R3, 1							; Prepara o identificador da imagem 1 para ser definida como imagem de fundo
	MOV [SELECIONA_BG], R3				; Atualiza a seleção de imagem de fundo
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_A:							; Define a imagem 2 como imagem de fundo
	MOV R3, 2							; Prepara o identificador da imagem 2 para ser definida como imagem de fundo
	MOV [SELECIONA_BG], R3				; Atualiza a seleção de imagem de fundo
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_B:							; Define a imagem 3 como imagem de fundo
	MOV R3, 3							; Prepara o identificador da imagem 3 para ser definida como imagem de fundo
	MOV [SELECIONA_BG], R3				; Atualiza a seleção de imagem de fundo
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_C:							; Ativa as animações simples (neve e luzes)
	MOV R3, animacao_neve 				; Prepara o endereço da variável que indica estado da animação e ecrãs utilizados)
	CALL ativa_animacao_simples			; Ativa a animação da neve
	MOV R3, animacao_luzes 				; Prepara o endereço da variável que indica estado da animação e ecrãs utilizados)
	CALL ativa_animacao_simples			; Ativa a animação das luzes
	MOV R3, 7							; Define o id do som a reproduzir
	MOV [INICIA_SOM], R3				; Comando para iniciar a reprodução do som especificado em loop
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_D:							; Desativa as animações simples (neve e luzes)
	MOV R3, animacao_neve 				; Prepara o endereço da variável que indica estado da animação e ecrãs utilizados)
	CALL desativa_animacao_simples		; Ativa a animação da neve
	MOV R3, animacao_luzes 				; Prepara o endereço da variável que indica estado da animação e ecrãs utilizados)
	CALL desativa_animacao_simples		; Ativa a animação das luzes
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_E:							; Ativa a animação complexa do merryxmas
	MOV R3, animacao_neve 				; Prepara o endereço da variável que indica estado da animação e ecrãs utilizados na animação da neve
	CALL desativa_animacao_simples		; Desativa a animação da neve para melhor fluidez da animação complexa
	MOV R3, animacao_luzes 				; Prepara o endereço da variável que indica estado da animação e ecrãs utilizados na animação das luzes
	CALL desativa_animacao_simples		; Desativa a animação das luzes para melhor fluidez da animação complexa
	MOV R3, 1							; Define a flag de animação do merryxmas como ativa
	MOV [animacao_merryxmas], R3		; Guarda o valor da flag (1) na variável que determina a execução da animação do merryxmas
	JMP sai_rotina_teclado				; Sai da rotina

acao_tecla_F:							; Desativa a animação complexa do merryxmas
	; Desativa a animação atualizando o valor da flag na primeira palavra da variável animacao_merryxmas
	MOV R0, animacao_merryxmas			; obtém o endereço da variável que guarda as informações da animação do merryxmas
	MOV R1, 0							; Guarda o valor 0 em R1
	MOV [R0], R1						; Guarda o valor da flag (0) na variável que determina a execução da animação do merryxmas

	; Restabelece os valores iniciais da animação do merryxmas
	ADD R0, 2							; Avança para a 2ª palavra da variável que guarda as informações do objeto merryxmas
	MOV R1, 1							; Guarda o valor 1 em R1
	MOV [R0], R1						; Restabelece o valor do incremento/decremento da coluna do objeto merryxmas para 1
	ADD R0, 2							; Avança para a 3ª palavra da variável que guarda as informações do objeto merryxmas
	MOV R1, 5							; Guarda o valor 5 em R1
	MOV [R0], R1						; Restabelece o valor do número de colunas para mover o objeto merryxmas para 5
	ADD R0, 2							; Avança para a 4ª palavra da variável que guarda as informações do objeto merryxmas
	MOV R1, [R0]						; Obtém o valor inicial da coluna do objeto merry xmas para repor no caso de se voltar a ativar a animação

	; Restabelece a coluna do objeto merryxmas para a posição inicial 
	MOV R2, merry_xmas					; Prepara o endereço da tabela que define o objeto merryxmas
	ADD R2, 2							; Avança para a 2ª palavra da tabela que define o objeto merryxmas
	MOV [R2], R1						; Guarda o valor inicial da coluna do objeto merryxmas

	; Redesenha o objeto merryxmas na posição inicial
	MOV R4, merry_xmas					; Prepara o endereço da tabela que define o objeto merryxmas
	CALL desenha_objeto					; Desenha o objeto merryxmas na posição inicial

	JMP sai_rotina_teclado				; Sai da rotina

sai_rotina_teclado:						; Restaura os valores dos registadores
	POP  R4
	POP  R3
	POP  R2
	POP  R1
    POP  R0
    RET

; -------------------------------------------------------------------------------------------------------------------
; INTERRUPTOR_OBJETO - Rotina que mostra ou oculta um ecrã/objeto mediante carregamento da tecla correspondente e de acordo com o seu estado atual
;  					 - (mostrado/ocultado) e reproduz efeito sonoro associado ao objeto
; Argumentos: 	  R3 - endereço da variável que guarda informação do objeto a mostrar/ocultar (num do ecrã, estado do objeto, som associado)
; -------------------------------------------------------------------------------------------------------------------
interruptor_objeto:
	PUSH R1
	PUSH R2
	PUSH R3
	PUSH R4

	MOV R1, R3							; Guarda o endereço da variável info_[nome_objeto] na variável R1

	MOV R2, [R1]						; obtém o número do ecrã a ser mostrado/ocultado
	ADD R1, 2							; avança para a próxima palavra para obter o estado do objeto (mostrado/ocultado)
	MOV R3, [R1]						; obtém estado do objeto
	ADD R1, 2							; avança para a próxima palavra para obter o efeito sonoro associado ao objeto
	MOV R4, [R1]						; obtém o identificador do som associado ao objeto
	SUB R1, 2							; Retrocede para a 2ª palavra da variável info_giftbox (estado do objeto)
	CMP R3, 0							; verifica se objeto está ocultado
	JNZ oculta_objeto					; Se estiver ocultado (0), vai para a rotina que exibe o objeto

exibe_objeto:
	CALL mostra_objeto					; Exibe o objeto. Argumentos:
										; R1 - 2ª palavra da variável info_merryxmas (estado do objeto)
										; R2 - número do ecrã a ser exibido/ocultado, em que o objeto está desenhado
										; R4 - identificador do som associado ao objeto
    JMP fim_interruptor					; Sai da rotina

oculta_objeto:
	CALL esconde_objeto					; Oculta o objeto. Argummentos: 
										; R1 - 2ª palavra da variável info_merryxmas (estado do objeto)
										; R2 - número do ecrã a ocultar

	CMP R2, 5							; Verifica se o objeto corresponde ao ecrã 5 (Árvore de Natal)
	JNZ fim_interruptor					; Se o objeto corresponder à árvore, desativa a animação das luzes, se não, sai da rotina

desativa_luzes_se_arvore:
	MOV R3, 0							; Define a flag de animação da árvore como inativa
	MOV [animacao_luzes], R3			; altera flag que indica que animação das luzes da árvore deve ser executada para 0 (0 = não executa animação, 1 = executa animação)
	MOV R3, 3							; Define o ecra das luzes 1
	MOV [ESCONDE_ECRA], R3				; comando do media center para ocultar o ecrã que possui o objeto das luzes 1
	MOV R3, 4							; Define o ecra das luzes 2
	MOV [ESCONDE_ECRA], R3				; comando do media center para ocultar o ecrã que possui o objeto das luzes 2

fim_interruptor:
	POP R4
	POP R3
	POP R2
	POP R1
	RET

; -------------------------------------------------------------------------------------------------------------------
; ATIVA_ANIMACAO_SIMPLES - Rotina que ativa a animação simples (neve e/ou luzes a piscar - alternam entre dois objetos)
; Argumentos: 		  R3 - endereço da variável (animacao_neve, animacao_luzes) que guarda estado da animação e ecrãs utilizados
; -------------------------------------------------------------------------------------------------------------------
ativa_animacao_simples:
	PUSH R1
	MOV R1, 1							; Define a flag de animação da neve como ativa (1)
	MOV [R3], R1						; altera flag que indica que animação deve ser executada para 1 (0 = não executa animação, 1 = executa animação)
	POP R1
	RET

; -------------------------------------------------------------------------------------------------------------------
; DESATIVA_ANIMACAO_SIMPLES - Rotina que desativa a animação simples (neve e/ou luzes a piscar - alternam entre dois objetos)
; Argumentos: 		  R3 - endereço da variável (animacao_neve, animacao_luzes) que guarda estado da animação e ecrãs utilizados
; -------------------------------------------------------------------------------------------------------------------
desativa_animacao_simples:
	PUSH R1
	MOV R1, 0							; Define a flag de animação da neve como inativa
	MOV [R3], R1						; altera flag que indica que animação da neve deve ser executada para 0 (0 = não executa animação, 1 = executa animação)
	
	ADD R3, 2							; Avança para a próxima palavra da variável para obter o número do primeiro ecrã usado na animação
	MOV R1, [R3]						; obtém o número do ecrã para que seja ocultado
	MOV [ESCONDE_ECRA], R1				; comando do media center ocultar o ecrã que possui o objeto da neve 1
	
	ADD R3, 2							; Avança para a próxima palavra da variável para obter o número do segundo ecrã usado na animação
	MOV R1, [R3]						; obtém o número do ecrã para que seja ocultado
	MOV [ESCONDE_ECRA], R1				; comando do media center ocultar o ecrã que possui o objeto da neve 2
	
	POP R1
	RET
